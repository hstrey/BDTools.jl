var documenterSearchIndex = {"docs":
[{"location":"reference/","page":"API Reference","title":"API Reference","text":"DocTestSetup = :(using BDTools)","category":"page"},{"location":"reference/#Static-Phantom","page":"API Reference","title":"Static Phantom","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"BDTools.StaticPhantom\nBDTools.staticphantom\nBDTools.findinitialrotation(::StaticPhantom, ::Int)\nBDTools.mask(::StaticPhantom, ::Int)\nBDTools.GroundTruth\nBDTools.groundtruth\nBase.getindex(::GroundTruth, ::Int, ::Int)\nBase.getindex(::GroundTruth, ::Int, ::Int, ::Int, ::Bool)","category":"page"},{"location":"reference/#BDTools.StaticPhantom","page":"API Reference","title":"BDTools.StaticPhantom","text":"A static phantom model\n\n\n\n\n\n","category":"type"},{"location":"reference/#BDTools.staticphantom","page":"API Reference","title":"BDTools.staticphantom","text":"staticphantom(ph::Array{Float64, 4}, sliceinfo::Matrix{Int}; staticslices=1:200)\n\nConstruct a static phantom object from phantom time series ph and slice motion data sliceinfo. The parameter staticslices allows to select a number slices are used for construction of a model.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BDTools.findinitialrotation-Tuple{StaticPhantom, Int64}","page":"API Reference","title":"BDTools.findinitialrotation","text":"findinitialrotation(sph::StaticPhantom, z::Real; intensity=0.01)\n\nFind an ellipse initial rotation angle that minimizes distortions from elliptical rotation. An intensity parameter specifies an intensity percentage for selection of points as parameters for optimization task that determines phantom initial rotation.\n\n\n\n\n\n","category":"method"},{"location":"reference/#BDTools.mask-Tuple{StaticPhantom, Int64}","page":"API Reference","title":"BDTools.mask","text":"mask(ph::StaticPhantom, z::Int; threshold=1.0)\n\nGet coordinates of an internal segment of the phantom's ph slice z. The threshold parameter allow to specify a percentage of masked coordinates.\n\n\n\n\n\n","category":"method"},{"location":"reference/#BDTools.GroundTruth","page":"API Reference","title":"BDTools.GroundTruth","text":"Phantom Simulated Ground Truth\n\nA ground truth representation of a phantom motion data given a rotation information. It contains a tensor of original and predicted values for the masked volume of an original phantom data, a slice index map, and a mask index map for translation to the original phantom coordinate space.\n\n\n\n\n\n","category":"type"},{"location":"reference/#BDTools.groundtruth","page":"API Reference","title":"BDTools.groundtruth","text":"groundtruth(ph::StaticPhantom, data::AbstractArray, angles::Vector;\n            startmotion=1, threshold=Inf, verbose=false, normalize=false)\n\nConstruct a prediction of a phantom motion data given a rotation information, and return a tensor of original and predicted values for the masked volume of the phantom ph, slice indices, and mask index map for translation to the original phantom coordinate space. \n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.getindex-Tuple{GroundTruth, Int64, Int64}","page":"API Reference","title":"Base.getindex","text":"getindex(gt::GroundTruth, x::Int, y::Int)\n\nReturn an index of a masked phantom volume.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.getindex-Tuple{GroundTruth, Int64, Int64, Int64, Bool}","page":"API Reference","title":"Base.getindex","text":"getindex(gt::GroundTruth, x::Int, y::Int, z::Int, original::Bool=false)\n\nReturn a phantom predicted ground truth data in the coordinate (x,y,z). If original is set to true, original phantom data is returned.\n\n\n\n\n\n","category":"method"},{"location":"reference/#I/O","page":"API Reference","title":"I/O","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"BDTools.serialize\nBDTools.deserialize","category":"page"},{"location":"reference/#BDTools.serialize","page":"API Reference","title":"BDTools.serialize","text":"serialize(filepath::String, gt::GroundTruth)\nserialize(filepath::String, gt::GroundTruthCleaned)\n\nSerialize a phantom ground truth data object gt into HDF5-formatted file.\n\nExample:\n\njulia> BDTools.serialize(\"gt.h5\", gt)\n\n\n\n\n\n","category":"function"},{"location":"reference/#BDTools.deserialize","page":"API Reference","title":"BDTools.deserialize","text":"deserialize(filepath::String, ::Type{GroundTruth})\ndeserialize(filepath::String, ::Type{GroundTruthCleaned})\n\nDeserialize a phantom ground truth data from a HDF5-formatted file, and construct GroundTruth object.\n\nExample:\n\njulia> gt = BDTools.deserialize(\"gt.h5\", GroundTruth)\nGroundTruth: (598, 359, 9, 2)\n\n\n\n\n\n","category":"function"},{"location":"reference/#Ellipse-Fitting","page":"API Reference","title":"Ellipse Fitting","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"BDTools.fitellipse\nBDTools.fitellipsedirect\nBDTools.canonical","category":"page"},{"location":"reference/#BDTools.fitellipse","page":"API Reference","title":"BDTools.fitellipse","text":"fitellipse(xy::AbstractMatrix)\n\nPerform an ellipse fitting from a collection of 2D coordinates xy.\n\nImplemented from \"Direct least squares fitting of ellipses\", Fitzgibbon, 1996.\n\n\n\n\n\nfitellipse(imgs::AbstractMatrix, segs::SegmentedImage, edge::Matrix{Int};\n             verbose=true, keepinitialonerror=true, secondfit=true) -> Vector\n\nPerform fitting of an ellipse given an image tensor imgs, mask for fitting coordinates, and edge elements of an ellipse shape. Returns a vector with fitted ellipse parameters.\n\nIf secondfit is true, then an additional fitting is performed after the result of first fitting is corrected.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BDTools.fitellipsedirect","page":"API Reference","title":"BDTools.fitellipsedirect","text":"fitellipsedirect(xy::AbstractMatrix)\n\nPerform an ellipse fitting from a collection of 2D coordinates xy.\n\nImplemented from \"Numerically stable direct least squares fitting of ellipses\", Halir, 1998.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BDTools.canonical","page":"API Reference","title":"BDTools.canonical","text":"canonical(p::Vector)\n\nConvert ellipse parameters p (6-element vector) in general form into canonical: center coordinates, axes & rotation angle in radians and\n\n\n\n\n\n","category":"function"},{"location":"reference/#Utils","page":"API Reference","title":"Utils","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"BDTools.getellipse\nBDTools.ellipserot\nBDTools.rotate\nBDTools.rotatevoxel\nBDTools.simulated_coordinates\nBDTools.phantominterp\nBDTools.fitline\nBDTools.getangles\nBDTools.maskindex","category":"page"},{"location":"reference/#BDTools.getellipse","page":"API Reference","title":"BDTools.getellipse","text":"getellipse(imgs::AbstractArray; verbose=true, secondfit=true) -> Vector\n\nReturns a vector with fitted ellipse parameters from a 2D image matrix.\n\n\n\n\n\ngetellipse(ph::StaticPhantom, z::Int)\n\nReturn ellipse properties for a slice z of a static phantom ph.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BDTools.ellipserot","page":"API Reference","title":"BDTools.ellipserot","text":"ellipserot(α, θ, a, b)\n\nEllipsoidal rotation matrix:\n\nα: rotation angle\nθ: ellipse initial rotation angle\na: ellipse long axis\nb: ellipse short axis\n\n\n\n\n\n","category":"function"},{"location":"reference/#BDTools.rotate","page":"API Reference","title":"BDTools.rotate","text":"rotate(x, y, z, a, b, c, u, v, w, θ)\n\nRotate point (x,y,z) around the line that passes through the point (a,b,c) in the direction of <u,v,w> on the angle θ.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BDTools.rotatevoxel","page":"API Reference","title":"BDTools.rotatevoxel","text":"rotatevoxel(o::Vector, p::Vector) -> f(x,y,z,θ)\n\nReturn a function that perform rotation of the voxel with coordinates (x,y,z) on the angle θ within XY-plane around the line started in an origin point o, and passing through a point p.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BDTools.simulated_coordinates","page":"API Reference","title":"BDTools.simulated_coordinates","text":"simulated_coordinates(sz::Tuple, a::Vector, b::Vector, θ::Float64)\n\nGenerate simulated coordinate set of size sz by rotating voxels within xy-plain on angle θ around the line passing through points a and b.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BDTools.phantominterp","page":"API Reference","title":"BDTools.phantominterp","text":"phantominterp(imgs::AbstractArray; itrptype = BSpline(Quadratic()))\n\nConstruct interpolation function from an image 3D tensor.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BDTools.fitline","page":"API Reference","title":"BDTools.fitline","text":"fitline(xy::AbstractMatrix) -> NamedTuple\n\nReturn line paramaters (mean, direction, slope) after fiting coordinates stored in column-major order input xy.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BDTools.getangles","page":"API Reference","title":"BDTools.getangles","text":"getangles(file::String; initpos=20, col=11)\n\nRead phantom rotation data from a file and extract rotation angle in radians. Return vector of angles, and an index in it of a first valid rotation.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BDTools.maskindex","page":"API Reference","title":"BDTools.maskindex","text":"maskindex(mask::BitMatrix)\n\nConstruct a coordinate index for phantom slice mask.\n\n\n\n\n\n","category":"function"},{"location":"reference/#QualityMeasures","page":"API Reference","title":"QualityMeasures","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"BDTools.st_snr\nBDTools.mul_noise","category":"page"},{"location":"reference/#BDTools.st_snr","page":"API Reference","title":"BDTools.st_snr","text":"st_snr(pred_ts, orig_ts)\n\nCalculates the standardized signal-to-noise ratio: Power(signal)/Power(noise)\n\n\n\n\n\n","category":"function"},{"location":"reference/#BDTools.mul_noise","page":"API Reference","title":"BDTools.mul_noise","text":"mulnoise(predts, orig_ts)\n\nCalculates the amplitudes of white and multiplicative noise using HMC sampling Expects normalized predts (mean=0, std=1) and origts (mean=0, std using pred_ts)\n\n\n\n\n\n","category":"function"},{"location":"reference/#Denoiser","page":"API Reference","title":"Denoiser","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"BDTools.load_ground_truth\nBDTools.load_phantom\nBDTools.DenoiseNet\nBDTools.TrainParameters\nBDTools.train!\nBDTools.denoise","category":"page"},{"location":"reference/#BDTools.Denoiser.load_ground_truth","page":"API Reference","title":"BDTools.Denoiser.load_ground_truth","text":"load_ground_truth(fname::String)\n\nReturns a GroundTruth object, a standardized ground truth data, and standardization parameters, i.e. μ and σ.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BDTools.Denoiser.load_phantom","page":"API Reference","title":"BDTools.Denoiser.load_phantom","text":"load_phantom(gt::GroundTruth, phantomfile::String)\n\nReturn standardized phantom time series data, and standardization parameters, i.e. μ and σ.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BDTools.Denoiser.DenoiseNet","page":"API Reference","title":"BDTools.Denoiser.DenoiseNet","text":"Denoiser Model\n\nA wrapper type for denoiser model. It contains deep neural network parameters, a loss function, and training parameters.\n\n\n\n\n\n","category":"type"},{"location":"reference/#BDTools.Denoiser.TrainParameters","page":"API Reference","title":"BDTools.Denoiser.TrainParameters","text":"Training parameters for a denoising network.\n\nadj_rate: a learning rate adjustment factor (default value is 0.33)\nbatch_size: a training data batch size (default value is 8)\nepochs: a number of training epochs (default value is 250)\neta: a learning rate (default value is 3e-4)\nkernel_size: a convolutional layer kernel size (default value is 9)\nlayers: a number of denoiser network convolutional layers (default value is 6)\nsave_path: a path to a location where a NN model is saved\nsave_best: if true then the denoiser model is saved on each successful loss improvement\nseed: a PRNG seed (default value is 180181)\ntest_split: a fraction of a phantom data dedicated to a testing set (default value is 0.33)\n\n\n\n\n\n","category":"type"},{"location":"reference/#BDTools.Denoiser.train!","page":"API Reference","title":"BDTools.Denoiser.train!","text":"train!(denoiser::Denoiser, sim::AbstractArray{T,3}, ori::AbstractArray{T,3})\n\nTrain a denoiser network given a ground truth data, sim, and an original phantom data, ori. The data has to be standardized.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BDTools.Denoiser.denoise","page":"API Reference","title":"BDTools.Denoiser.denoise","text":"denoise(model::DenoiseNet, data)\n\nDenoise data using a denoseing CNN model. The data input should be standardized.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"DocTestSetup = :(using BDTools)","category":"page"},{"location":"#BDTools.jl","page":"Home","title":"BDTools.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tools for data analysis of BrainDancer Dynamic Phantom data.","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BDTools is a toolbox that provides functionalities to process data and generate models of BrainDancer Dynamic Phantom (BDPh).","category":"page"},{"location":"","page":"Home","title":"Home","text":"The main functionalities of the package include:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Automatic segmentation of BDPh images.\nEstimation of BDPh image properties.\nConstruction of ground truth phantom.\nModeling of a BrainDancer phantom.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The best way to get started with BDTools is to look at the documented examples.","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Load libraries required for this tutorial.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using BDTools\nusing Plots\nusing NIfTI\nusing DelimitedFiles","category":"page"},{"location":"tutorial/#Loading-data","page":"Tutorial","title":"Loading data","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"First, we load phantom data from a NIfTI formatted file.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"const DATA_DIR = \"../PhantomData\"\nphantom_ts = niread(joinpath(DATA_DIR, \"BFC_time_series.nii\"));\nsz = size(phantom_ts)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Next, we load rotation angles from rotation data,","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"angles, firstrotidx = BDTools.getangles(joinpath(DATA_DIR, \"epi\",  \"log.csv\"))","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"and slice motion information.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"sliceinfo, _ = readdlm(joinpath(DATA_DIR, \"slices.csv\"), ',', Int, header=true)","category":"page"},{"location":"tutorial/#Construct-static-phantom","page":"Tutorial","title":"Construct static phantom","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Use staticphantom function to construct a static phantom object by providing phantom data time series and slice motion info. Resulting object contains an ellipse fit for each slice of a static phantom.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"sph = staticphantom(convert(Array, phantom_ts), sliceinfo);","category":"page"},{"location":"tutorial/#Show-phantom-center-axis","page":"Tutorial","title":"Show phantom center axis","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Using phantom fitted ellipse parameters, we construct a phantom center axis (z-axis), and fit ellipse centers on this axis.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"let ecs = BDTools.centers(sph), rng=collect(-1.:0.15:1.)\n    # show original data\n    p = scatter(ecs[:,1], ecs[:,2], label=\"centers\", legend=:topleft)\n    # show predicted phantom center axis\n    cc = map(t->BDTools.predictcenter(sph, t), rng)\n    plot!(p, map(first, cc), map(last, cc), label=\"axis\")\n    # project slice centers to a fitted center axis\n    xy = BDTools.fittedcenters(sph)\n    scatter!(p, xy[:,1], xy[:,2], label=\"fitted\")\nend","category":"page"},{"location":"tutorial/#Construct-ground-truth-dataset","page":"Tutorial","title":"Construct ground truth dataset","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We can construct a ground truth data at any rotation angle. Providing a rotation angle α and a slice coordinate z, we generate a rotated phantom.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"let α = deg2rad(10), z = 3\n    # get ellipse parameters at slice z\n    origin, a, b = BDTools.getellipse(sph, z)\n    # get a ellipse's initial rotation angle\n    γ = BDTools.findinitialrotation(sph, z)\n\n    # Coordinate transformation\n    coords = [BDTools.ellipserot(α, γ, a, b)*([i,j,z].-origin).+origin for i in 1:sz[1], j in 1:sz[2]]\n    # interpolate intensities\n    sim = map(c->sph.interpolation(c...), coords)\n    # generate image\n    gen = BDTools.Images.Colors.Gray.(sim |> BDTools.genimg)\n    # show averaged image\n    ave = BDTools.Images.Colors.Gray.(sph.data[:,:,z] |> BDTools.genimg)\n    pave = plot(ave, aspect_ratio=1.0, axis=nothing, framestyle=:none, title=\"Slice $z\", size=(300,350))\n    # show generated image\n    pgen = plot(gen, aspect_ratio=1.0, axis=nothing, framestyle=:none, title=\"Rotated at $(rad2deg(α))°\", legend=:none)\n    plot(pave, pgen)\nend","category":"page"},{"location":"tutorial/#Generate-rotated-predictions","page":"Tutorial","title":"Generate rotated predictions","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For a rotation information, we can generate a predictions of rotated phantoms.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"gt = groundtruth(sph, phantom_ts, angles; startmotion=firstrotidx, threshold=.95)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"and plot prediction and original data","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"let x = 42, y = 52, z = 3 # get coordinates\n    cidx = gt[x, y] # get a masked coordinate index\n    cidx === nothing && return\n\n    # plot data\n    plot(gt[x, y, z], label=\"prediction\", title=\"Intensity (x=$x, y=$y, z=$z)\")\n    plot!(gt[x, y, z, true], label=\"original\")\nend","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"A generated phantom ground truth data can be serialized into HDF5 file format. Use BDTools.serialize function to save data as follows:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"BDTools.serialize(\"gt.h5\", gt)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"for reading serialized phantom ground truth data, use BDTools.deserialize function that accepts file name and GroundTruth type as parameters.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"gt = BDTools.deserialize(\"gt.h5\", GroundTruth)","category":"page"}]
}
