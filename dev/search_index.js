var documenterSearchIndex = {"docs":
[{"location":"reference/","page":"API Reference","title":"API Reference","text":"DocTestSetup = :(using BDTools)","category":"page"},{"location":"reference/#Ellipse-Fitting","page":"API Reference","title":"Ellipse Fitting","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"BDTools.fitellipse\nBDTools.fitellipsedirect\nBDTools.canonical","category":"page"},{"location":"reference/#BDTools.fitellipse","page":"API Reference","title":"BDTools.fitellipse","text":"fitellipse(xy::AbstractMatrix)\n\nPerform an ellipse fitting from a collection of 2D coordinates xy.\n\nImplemented from \"Direct least squares fitting of ellipses\", Fitzgibbon, 1996.\n\n\n\n\n\nfitellipse(imgs::AbstractMatrix, segs::SegmentedImage, edge::Matrix{Int};\n             verbose=true, keepinitialonerror=true, secondfit=true) -> Vector\n\nPerform fitting of an ellipse given an image tensor imgs, mask for fitting coordinates, and edge elements of an ellipse shape. Returns a vector with fitted ellipse parameters.\n\nIf secondfit is true, then an additional fitting is performed after the result of first fitting is corrected.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BDTools.fitellipsedirect","page":"API Reference","title":"BDTools.fitellipsedirect","text":"fitellipsedirect(xy::AbstractMatrix)\n\nPerform an ellipse fitting from a collection of 2D coordinates xy.\n\nImplemented from \"Numerically stable direct least squares fitting of ellipses\", Halir, 1998.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BDTools.canonical","page":"API Reference","title":"BDTools.canonical","text":"canonical(p::Vector)\n\nConvert ellipse parameters p (6-element vector) in general form into canonical: center coordinates, axes & rotation angle in radians and\n\n\n\n\n\n","category":"function"},{"location":"reference/#Utils","page":"API Reference","title":"Utils","text":"","category":"section"},{"location":"reference/","page":"API Reference","title":"API Reference","text":"BDTools.ellipserot\nBDTools.rotate\nBDTools.rotatevoxel\nBDTools.simulated_coordinates\nBDTools.phantominterp\nBDTools.fitline\nBDTools.getangles","category":"page"},{"location":"reference/#BDTools.ellipserot","page":"API Reference","title":"BDTools.ellipserot","text":"ellipserot(α, θ, a, b)\n\nEllipsoidal rotation matrix:\n\nα: rotation angle\nθ: ellipse initial rotation angle\na: ellipse long axis\nb: ellipse short axis\n\n\n\n\n\n","category":"function"},{"location":"reference/#BDTools.rotate","page":"API Reference","title":"BDTools.rotate","text":"rotate(x, y, z, a, b, c, u, v, w, θ)\n\nRotate point (x,y,z) around the line that passes through the point (a,b,c) in the direction of <u,v,w> on the angle θ.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BDTools.rotatevoxel","page":"API Reference","title":"BDTools.rotatevoxel","text":"rotatevoxel(o::Vector, p::Vector) -> f(x,y,z,θ)\n\nReturn a function that perform rotation of the voxel with coordinates (x,y,z) on the angle θ within XY-plane around the line started in an origin point o, and passing through a point p.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BDTools.simulated_coordinates","page":"API Reference","title":"BDTools.simulated_coordinates","text":"simulated_coordinates(sz::Tuple, a::Vector, b::Vector, θ::Float64)\n\nGenerate simulated coordinate set of size sz by rotating voxels within xy-plain on angle θ around the line passing through points a and b.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BDTools.phantominterp","page":"API Reference","title":"BDTools.phantominterp","text":"phantominterp(imgs::AbstractArray; itrptype = BSpline(Quadratic()))\n\nConstruct interpolation function from an image 3D tensor.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BDTools.fitline","page":"API Reference","title":"BDTools.fitline","text":"fitline(xy::AbstractMatrix) -> NamedTuple\n\nReturn line paramaters (mean, direction, slope) after fiting coordinates stored in column-major order input xy.\n\n\n\n\n\n","category":"function"},{"location":"reference/#BDTools.getangles","page":"API Reference","title":"BDTools.getangles","text":"getangles(file::String; initpos=20, col=11)\n\nRead phantom rotation data from a file and extract rotation angle in radians. Return vector of angles, and an index in it of a first valid rotation.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"DocTestSetup = :(using BDTools)","category":"page"},{"location":"#BDTools.jl","page":"Home","title":"BDTools.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tools for data analysis of BrainDancer Dynamic Phantom data.","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BDTools is a toolbox that provides functionalities to process data and generate models of BrainDancer Dynamic Phantom (BDPh).","category":"page"},{"location":"","page":"Home","title":"Home","text":"The main functionalities of the package include:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Automatic segmentation of BDPh images.\nEstimation of BDPh image properties.\nConstruction of ground truth phantom.\nModeling of a BrainDancer phantom.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The best way to get started with BDTools is to look at the documented examples.","category":"page"}]
}
